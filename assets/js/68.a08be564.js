(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{412:function(e,a,r){"use strict";r.r(a);var t=r(1),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"tech-validations-des-formulaires"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tech-validations-des-formulaires"}},[e._v("#")]),e._v(" (Tech) Validations des formulaires")]),e._v(" "),r("p",[e._v("La validation des formulaires s'appuie sur la librairie "),r("a",{attrs:{href:"https://logaretm.github.io/vee-validate/overview.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("VeeValidate"),r("OutboundLink")],1),e._v(". Cette librairie à une approche déclarative et permet de définir les règles de validation au niveau du template et des inputs.")]),e._v(" "),r("h3",{attrs:{id:"exemple-basique-avec-veevalidate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#exemple-basique-avec-veevalidate"}},[e._v("#")]),e._v(" Exemple basique avec VeeValidate")]),e._v(" "),r("FormValidation-Example"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<ValidationProvider v-slot="{ errors }" rules="required|email" name="email">\n    <input v-model="value" type="text">\n    <span>{{ errors[0] }}</span>\n</ValidationProvider>\n')])])]),r("p",[e._v("La liste des différentes règles disponibles sont définies "),r("a",{attrs:{href:"https://logaretm.github.io/vee-validate/guide/rules.html#importing-the-rules",target:"_blank",rel:"noopener noreferrer"}},[e._v("ici"),r("OutboundLink")],1),e._v(". Il est également possible de rajouter de nouvelles règles personalisées.")]),e._v(" "),r("h3",{attrs:{id:"implementation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implémentation")]),e._v(" "),r("p",[e._v("Les composants d'input du design system abstraient la gestion d'erreur et ne nécessitent de passer uniquement la propriété rules :")]),e._v(" "),r("ul",[r("li",[e._v("TextInput")]),e._v(" "),r("li",[e._v("Select")]),e._v(" "),r("li",[e._v("CheckableGroup")]),e._v(" "),r("li",[e._v("Autocomplete")]),e._v(" "),r("li",[e._v("Datepicker")])]),e._v(" "),r("p",[e._v("L'exemple précédent peut être ainsi être reproduit de la manière suivante")]),e._v(" "),r("FormValidation-Example2"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<TextInput label="Email" v-model="value" rules="required|email" />\n')])])]),r("h3",{attrs:{id:"validation-de-formulaire"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#validation-de-formulaire"}},[e._v("#")]),e._v(" Validation de formulaire")]),e._v(" "),r("p",[e._v("Les formulaires sont souvent composés de plusieurs champs, pour gérer l'état du formulaire, VeeValidate fournit un composant "),r("a",{attrs:{href:"https://logaretm.github.io/vee-validate/api/validation-observer.html#scoped-slot-props",target:"_blank",rel:"noopener noreferrer"}},[e._v("ValidationObserver"),r("OutboundLink")],1),e._v(" qui encapsule les formulaires et permet d'avoir un état de validation du formulaire.")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<template>\n    <ValidationObserver ref="form" v-slot="{ handleSubmit, errors, failed }">\n        <form @submit.prevent="handleSubmit(onSubmit)">\n            <TextInput id="email" type="text" placeholder="Username" v-model="username" label="Username" :error="errors.username" rules="required"/>\n            <TextInput id="password" type="password" placeholder="******************" v-model="password" label="Password" :error="errors.password" rules="required"/>\n            <Button variant="primary" type="submit">\n                Sign in\n            </Button>\n        </form>\n    </ValidationObserver> \n</template>\n\n')])])]),r("h3",{attrs:{id:"gestion-d-erreurs-retourne-par-une-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gestion-d-erreurs-retourne-par-une-api"}},[e._v("#")]),e._v(" Gestion d'erreurs retourné par une API")]),e._v(" "),r("p",[e._v("Imaginons qu'à partir de l'exemple précédent, le mot de passe n'est pas valide et que l'API retourne une erreur au format suivant")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("{\n    error: {\n        fields: {\n            password: ['Le mot de passe est invalide']\n        }\n    }\n}\n")])])]),r("p",[e._v("Le composant ValidationObserver permet de définir des erreurs au niveau du formulaire en utilisant la méthode "),r("code",[e._v("setErrors")]),e._v(" qui accepte un objet contenant des erreurs pour chaque champ (cf: "),r("a",{attrs:{href:"https://logaretm.github.io/vee-validate/advanced/server-side-validation.html#setting-errors-manually",target:"_blank",rel:"noopener noreferrer"}},[e._v("Settings Errors Manually"),r("OutboundLink")],1),e._v(")")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<script>\nexport default {\n     methods: {\n        onSubmit() {\n            try {\n                // Retourne une 400 car password invalide\n                await postLogin(this.email, this.password)\n            } catch (err) {\n                this.$refs.form.setErrors(err.error.fields);\n            }\n        }\n    }\n}\n<\/script>\n")])])]),r("h3",{attrs:{id:"personalisation-des-messages"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#personalisation-des-messages"}},[e._v("#")]),e._v(" Personalisation des messages")]),e._v(" "),r("p",[e._v("Les messages sont définis au niveau "),r("a",{attrs:{href:"https://logaretm.github.io/vee-validate/guide/basics.html#messages",target:"_blank",rel:"noopener noreferrer"}},[e._v("des règles de VeeValidate"),r("OutboundLink")],1)])],1)}),[],!1,null,null,null);a.default=s.exports}}]);